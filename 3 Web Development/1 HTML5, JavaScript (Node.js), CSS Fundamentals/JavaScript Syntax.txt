//Code Examples From Code Academy  
  var x = 2;

  Math.random() // generates random number

  function randomIntFromInterval(min,max)
  {
      return Math.floor(Math.random()*(max-min+1)+min);
  }

  Math.floor()  // round number down to nearest whole number

  //On line Comment
  /*Larger
  multiline
  comment*/

  var moonPhase = "full";
  var foggyNight = false;
  if (moonPhase === "full" || foggyNight){
  	console.log("Howwwwlll!!");    
  } else if (moonPhase === "mostly full") {
    console.log("Arms and legs are getting hairier");
  } else if (moonPhase === "mostly new") {
    console.log("Back on two feet");
  } else {
    console.log("Invalid moon phase");
  }

  switch (groceryItem) {
    case 'tomato':
      console.log('Tomatoes are $0.49');
      break;
    case 'lime':
      console.log('Limes are $1.49');
      break;
    case 'papaya':
      console.log('Papayas are $1.29');
      break;
    default:
      console.log('Invalid item');
      break;
  }

  bucketList.push("live","lie"); // pushes at end of array
  bucketList.pop(); // pops item off end of array

  /*var skillset = document.getElementsByClassName('skillset');

  alert(skillset);*/

  function main (){
    $('.skillset').hide();
    $('.skillset').fadeIn(1000);
    $('.projects').hide();
    $('.projects-button').on('click',function(){
      $('.projects').show(); // or toggle
      $(this).next().toggle(); //next selects next direct element
      $(this).next().slideToggle(400);
      $(this).toggleClass('active');
      $(this).text('Projects Viewed');
    });
  }

  $(document).ready(main);





// W3 Definitions Page
  /*


  A primitive value is a value that has no properties or methods.

  A primitive data type is data that has a primitive value.

  JavaScript defines 5 types of primitive data types:

  string
  number
  boolean
  null
  undefined
  Primitive values are immutable (they are hardcoded and therefore cannot be changed).
  */


  //  object literal
  var person = {
      firstName:"John",
      lastName:"Doe",
      age:50,
      eyeColor:"blue"
  };

  //new Keyword
  var person = new Object();
  person.firstName = "John";
  person.lastName = "Doe";
  person.age = 50;
  person.eyeColor = "blue";

  //Object Constructor
  function person(first, last, age, eye) {
      this.firstName = first;
      this.lastName = last;
      this.age = age;
      this.eyeColor = eye;
  }
  var myFather = new person("John", "Doe", 50, "blue");
  var myMother = new person("Sally", "Rally", 48, "green");


  /*
  The this Keyword
  In JavaScript, the thing called this, is the object that "owns" the JavaScript code.

  The value of this, when used in a function, is the object that "owns" the function.

  The value of this, when used in an object, is the object itself.

  The this keyword in an object constructor does not have a value. It is only a substitute for the new object.

  The value of this will become the new object when the constructor is used to create an object.
  */

  //Built-in JavaScript Constructors
    // There is no reason to create complex objects. Primitive values execute much faster.
  var x1 = new Object();    // A new Object object
  var x2 = new String();    // A new String object
  var x3 = new Number();    // A new Number object
  var x4 = new Boolean();   // A new Boolean object
  var x5 = new Array();     // A new Array object
  var x6 = new RegExp();    // A new RegExp object
  var x7 = new Function();  // A new Function object
  var x8 = new Date();      // A new Date object

  var x1 = {};            // new object
  var x2 = "";            // new primitive string
  var x3 = 0;             // new primitive number
  var x4 = false;         // new primitive boolean
  var x5 = [];            // new array object
  var x6 = /()/           // new regexp object
  var x7 = function(){};  // new function object

  var x = person;  // The object x is not a copy of person. It is person.





//W3 properties
  objectName.property          // person.age

  objectName["property"]       // person["age"]

  objectName[expression]       // x = "age"; person[x]

  //Loop to interate through an object
  var txt = "";
  var person = {fname:"John", lname:"Doe", age:25}; 
  var x;
  for (x in person) {
      txt += person[x] + " ";
  }

  //Adding Properties
  person.nationality = "English";

  //Deleting properties
  var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
  delete person.age;   // or delete person["age"]; 

  /*
  All properties have a name. In addition they also have a value.

  The value is one of the property's attributes.

  Other attributes are: enumerable, configurable, and writable.

  These attributes define how the property can be accessed (is it readable?, is it writable?)

  In JavaScript, all attributes can be read, but only the value attribute can be changed (and only if the property is writable).

  */



//W3 Prototyping
  /*
  All JavaScript objects inherit the properties and methods from their prototype.

  Objects created using an object literal, or with new Object(), inherit from a prototype called Object.prototype.

  Objects created with new Date() inherit the Date.prototype.

  The Object.prototype is on the top of the prototype chain.

  All JavaScript objects (Date, Array, RegExp, Function, ....) inherit from the Object.prototype.


  */

  //Adding a Property to an Object
  myFather.nationality = "English";

  //Adding a Method to an Object
  myFather.name = function () {
      return this.firstName + " " + this.lastName;
  };

  //Adding Properties to a Prototype
  Person.nationality = "English";

  //Using the prototype Property
  //The JavaScript prototype property allows you to add new properties to an existing prototype:

  function Person(first, last, age, eyecolor) {
      this.firstName = first;
      this.lastName = last;
      this.age = age;
      this.eyeColor = eyecolor;
  }
  Person.prototype.nationality = "English";

/*
TO DOs:
- Recursion
  //Simlar to loop?  
    function factorial(n) {  
      if (n < 0) {
        // Termination condition to prevent infinite recursion and specific statement that will explicitly stop the recursion
        return;
      }
      // Base case
      if (n === 0) {
        return 1;
      }
      // Recursive case
      return n * factorial(n -1);
    }

// Create an empty array called "stack"
var stack = [];
// Here is our recursive function
function power(base, exponent) {
  // Base case 
  if ( exponent === 0 ) {
    return 1;
  }
  // Recursive case
  else {
  stack[exponent - 1] = base * power(base, exponent - 1);
    return stack[exponent - 1];
  }
}

function countDown(int){
    if(int === 0){
        return 1;
    } else {
        stack.push(int);
        countDown(int-1);
        return;
    }
}


//base case, Recursive case
function factorial(3) {  
  if (3 === 0) {
    return 1;
  }  
  return 3 * factorial(3 - 1);
              if (2 === 0) {
                return 1;
              }
              return 2 * factorial(2 - 1);
                          if (1 === 0) {
                            return 1;
                          }
                          return 1 * factorial(1 - 1);
                                      if (0 === 0) {
                                        return 1;
                                      }
                                      return 1 * factorial(1 - 1);
}


var stack = [5,4,3,2,1]

function multiplyEach() {
  // Remove the last value of the stack 
  // and assign it to the variable int
  int = stack.pop(); //1
  x = stack.length; //4
  // Base case
  if (x === 0) {
    return int;
  }
  // Recursive case
  else {
  stack[x - 1] = stack[x- 1] * int ;
  return multiplyEach();
  }
}



// Our array of messy words
var capitals = ["berlin", "parIs", "MaDRiD"];

// Capitalize function
function capitalize(word) {
  return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
}

// Our recursive function
function fixLetterCase(array, i) {    
  // Base case
  if (i === array.length) {
    return;
  } 
  // Action
  array[i] = capitalize(array[i]);
  // Recursive case
  return fixLetterCase(array, i + 1);
}

// Here is our function call
fixLetterCase(capitals, 0);

console.log(capitals);


// Here is the array we will store results in
var multiples = [];

function multiplesOf(base, i) {
  // Base case
  if (i===0) {
  return multiples;
  }
  // Recursive case
  else {
    multiples[i - 1] = base * i;
  // Add a recursive function call
  return multiplesOf(base, i-1);
  } 
}

multiplesOf(6, 3);


//map function
var oldArray = [1,2,3,4,5];

var newArray = oldArray.map(function(val){
  return val + 3;
});

//reduce function
var array = [4,5,6,7,8];
var singleVal = 0;

// Only change code below this line.

singleVal = array.reduce(function(previousVal,currentVal){
  return previousVal + currentVal;
},0);


//filter function
var oldArray = [1,2,3,4,5,6,7,8,9,10];

// Only change code below this line.

var newArray = oldArray.filter(function(val){
  return val <=5;
});







switch (car){
  case: "honda":
      klskldfjs 
      break;

  } case:
}



All of these rules are best described in examples: 
    */
    function factorial(n) {       
      // Base Case
      if (n === 0) {
        return 1;
      }
      
      // Recursive Case
      return n * factorial(n - 1);
    }
    /* To help visualize whats happening:
    factorial(3);
    function factorial(3) {  
          if (3 === 0) {
            return 1;
          }  
          return 3 * factorial(3 - 1);
                if (2 === 0) {
                  return 1;
                }
                return 2 * factorial(2 - 1);
                      if (1 === 0) {
                        return 1;
                      }
                      return 1 * factorial(1 - 1);
                            if (0 === 0) {
                              return 1;// returns 1 here
                //After this point the function can return a value by going back up the chain.
                            }           
    
    The Base Case prevents infinite recursion and is the condition your recursive case should be working towards
    The Recursive case is when you have the function return itself and can be done in many ways but the general idea is your recursive case should be working towards your base case

    The Terminating Condition is for edge cases and wierd inputs.  For example:
    */
    function factorial(n) {  
      if (n < 0) {
        //This terminating condition is preventing an error in the case a negative number is used as an input
        return;
      }
      
      // Base case
      if (n === 0) {
        return 1;
      }
      
      // Recursive case
      return n * factorial(n - 1);
    }


    //Another Example
    function multiplyEach(arr) {
      // Remove the last value of the stack
      // and assign it to the variable int
      int = arr.pop(); //1
      x = arr.length; //4
      // Base case
      if (x === 0) {
        return int;
      }
      // Recursive case
      else {
        arr[x - 1] = arr[x- 1] * int ;
        return multiplyEach(arr);
      }
    }   
    /*
    var stack = [5,4,3,2,1];
    multiplyEach(stack)
      int = arr.pop(); //1
      x = arr.length; //now 4
      if (x === 0) { // x = 4
        return int;
      }
      else { 
        //arr[x - 1] is the last item in the array
        arr[4 - 1] = arr[4- 1] * 1 ;
        //lastItemInArr = 2*1;
        return multiplyEach(stack);//stack now is [5,4,3,2];
      }
            int = arr.pop(); //2
            x = arr.length; //now 3
            if (x === 0) { // x = 3
              return int;
            }
            else { 
              arr[3 - 1] = arr[3 - 1] * 2 ;
              //lastItemInArr = 3*2;
              return multiplyEach(stack);//stack now is [5,4,6];
            } 
                  int = arr.pop(); //6
                  x = arr.length; //now 2
                  if (x === 0) { // x = 2
                    return int;
                  }
                  else { 
                    arr[2 - 1] = arr[2 - 1] * 6 ;
                    //lastItemInArr = 4*6;
                    return multiplyEach(stack);//stack now is [5,24];
                  }
                        int = arr.pop(); //24
                        x = arr.length; //now 1
                        if (x === 0) { // x = 1
                          return int;
                        }
                        else { 
                          arr[1 - 1] = arr[1 - 1] * 24 ;
                          //lastItemInArr = 5*24;
                          return multiplyEach(stack);//stack now is [5,24];
                        }
                              int = arr.pop(); //120
                              x = arr.length; //now 0
                              if (x === 0) { // x = 0
                                return int; // int is 120
                              }





















*/